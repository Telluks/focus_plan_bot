import os
import json
import logging
import asyncio
import nest_asyncio
from datetime import datetime, timedelta
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from config import BOT_TOKEN, ADMIN_IDS

logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
DATA_FILE = "data.json"
WEBHOOK_URL = "https://focus-plan-bot.onrender.com/webhook"

scheduler = BackgroundScheduler()
scheduler.start()


def today_str(offset=0):
    return (datetime.now() + timedelta(days=offset)).strftime("%Y-%m-%d")


def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}


def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)


async def set_commands(app):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("addmain", "–î–æ–±–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É"),
        BotCommand("addextra", "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É"),
        BotCommand("mytasks", "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∑–∞–¥–∞—á–∏"),
        BotCommand("complete_main", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É"),
        BotCommand("complete_extra", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É"),
        BotCommand("delete_main", "–£–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É"),
        BotCommand("delete_extra", "–£–¥–∞–ª–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É"),
        BotCommand("reset", "–°–±—Ä–æ—Å–∏—Ç—å –∑–∞–¥–∞—á–∏"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("admin", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (–∞–¥–º–∏–Ω)")
    ]
    await app.bot.set_my_commands(commands)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ –∑–∞–¥–∞—á–∏.\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/addmain [—Ç–µ–∫—Å—Ç] ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞\n"
        "/addextra [—Ç–µ–∫—Å—Ç] ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–∞—á–∞\n"
        "/mytasks ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n"
        "/complete_main [–Ω–æ–º–µ—Ä] ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é\n"
        "/complete_extra [–Ω–æ–º–µ—Ä] ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–ø\n"
        "/delete_main [–Ω–æ–º–µ—Ä] ‚Äî —É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é\n"
        "/delete_extra [–Ω–æ–º–µ—Ä] ‚Äî —É–¥–∞–ª–∏—Ç—å –¥–æ–ø\n"
        "/stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/admin ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    )


async def add_task(update, context, task_type):
    user_id = str(update.effective_user.id)
    text = " ".join(context.args)
    if not text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    today = today_str()
    data = load_data()
    data.setdefault(user_id, {"tasks": {}, "stats": {}})
    data[user_id]["tasks"].setdefault(today, {"main": [], "extra": []})
    if task_type == "main" and len(data[user_id]["tasks"][today]["main"]) >= 3:
        await update.message.reply_text("–õ–∏–º–∏—Ç: 3 –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏.")
        return
    data[user_id]["tasks"][today][task_type].append({"text": text, "done": False})
    save_data(data)
    await update.message.reply_text(f"{'–û—Å–Ω–æ–≤–Ω–∞—è' if task_type == 'main' else '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è'} –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")


async def add_main(update, context):
    await add_task(update, context, "main")


async def add_extra(update, context):
    await add_task(update, context, "extra")


async def my_tasks(update, context):
    user_id = str(update.effective_user.id)
    today = today_str()
    data = load_data()
    tasks = data.get(user_id, {}).get("tasks", {}).get(today, {"main": [], "extra": []})
    msg = "üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"

    msg += "üåü –û—Å–Ω–æ–≤–Ω—ã–µ:\n" + (
        "\n".join([f"{i+1}. {'‚úÖ' if t['done'] else '‚ùå'} {t['text']}" for i, t in enumerate(tasks["main"])])
        if tasks["main"] else "‚Äî"
    )
    msg += "\n\n‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:\n" + (
        "\n".join([f"{i+1}. {'‚úÖ' if t['done'] else '‚ùå'} {t['text']}" for i, t in enumerate(tasks["extra"])])
        if tasks["extra"] else "‚Äî"
    )
    await update.message.reply_text(msg)


async def complete(update, context, list_name):
    user_id = str(update.effective_user.id)
    today = today_str()
    data = load_data()
    try:
        idx = int(context.args[0]) - 1
        data[user_id]["tasks"][today][list_name][idx]["done"] = True
        save_data(data)
        await update.message.reply_text("–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")


async def delete(update, context, list_name):
    user_id = str(update.effective_user.id)
    today = today_str()
    data = load_data()
    try:
        idx = int(context.args[0]) - 1
        del data[user_id]["tasks"][today][list_name][idx]
        save_data(data)
        await update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")


async def reset(update, context):
    user_id = str(update.effective_user.id)
    today = today_str()
    data = load_data()
    data[user_id]["tasks"][today] = {"main": [], "extra": []}
    save_data(data)
    await update.message.reply_text("–ó–∞–¥–∞—á–∏ —Å–±—Ä–æ—à–µ–Ω—ã.")


async def stats(update, context):
    user_id = str(update.effective_user.id)
    data = load_data()
    total, done = 0, 0
    for tasks in data.get(user_id, {}).get("tasks", {}).values():
        for t in tasks["main"] + tasks["extra"]:
            total += 1
            if t["done"]:
                done += 1
    await update.message.reply_text(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ {done} –∏–∑ {total} –∑–∞–¥–∞—á.")


async def admin(update, context):
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    data = load_data()
    msg = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for uid, user in data.items():
        total = sum(len(t["main"]) + len(t["extra"]) for t in user["tasks"].values())
        done = sum(t["done"] for day in user["tasks"].values() for t in day["main"] + day["extra"])
        msg += f"{uid}: {done}/{total}\n"
    await update.message.reply_text(msg)


async def unknown(update, context):
    await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω—è–ª. –í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é.")


def transfer_unfinished_tasks():
    data = load_data()
    yday = today_str(-1)
    today = today_str()
    for user, udata in data.items():
        if yday in udata["tasks"]:
            for list_type in ["main", "extra"]:
                for task in udata["tasks"][yday][list_type]:
                    if not task["done"]:
                        data[user]["tasks"].setdefault(today, {"main": [], "extra": []})
                        data[user]["tasks"][today][list_type].append(task)
    save_data(data)


def schedule_jobs(app):
    scheduler.add_job(lambda: app.create_task(send_reminder(app, "üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–≤–µ–¥–∏ –∑–∞–¥–∞—á–∏.")), "cron", hour=11)
    scheduler.add_job(lambda: app.create_task(send_reminder(app, "üïë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–∞—Ö.")), "cron", hour=14)
    scheduler.add_job(lambda: app.create_task(send_reminder(app, "üåá –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç: —á—Ç–æ —Å–¥–µ–ª–∞–Ω–æ?")), "cron", hour=20)
    scheduler.add_job(transfer_unfinished_tasks, "cron", hour=5)


async def send_reminder(app, text):
    for user in load_data():
        try:
            await app.bot.send_message(chat_id=int(user), text=text)
        except:
            pass


async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    await set_commands(app)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addmain", add_main))
    app.add_handler(CommandHandler("addextra", add_extra))
    app.add_handler(CommandHandler("mytasks", my_tasks))
    app.add_handler(CommandHandler("complete_main", lambda u, c: complete(u, c, "main")))
    app.add_handler(CommandHandler("complete_extra", lambda u, c: complete(u, c, "extra")))
    app.add_handler(CommandHandler("delete_main", lambda u, c: delete(u, c, "main")))
    app.add_handler(CommandHandler("delete_extra", lambda u, c: delete(u, c, "extra")))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown))

    schedule_jobs(app)
    await app.initialize()
    await app.bot.set_webhook(WEBHOOK_URL)
    await app.start()
    await app.updater.start_polling()
    await app.updater.stop()
    await app.stop()
    await app.shutdown()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())