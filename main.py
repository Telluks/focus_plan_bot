import os; os.environ["PORT"] = "10000"

import json
import logging
import threading
from datetime import datetime, timedelta
from http.server import BaseHTTPRequestHandler, HTTPServer
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters
)
from apscheduler.schedulers.background import BackgroundScheduler
from config import BOT_TOKEN, ADMIN_IDS

logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO
)

DATA_FILE = "data.json"
scheduler = BackgroundScheduler()
scheduler.start()

def today_str(offset=0):
    return (datetime.now() + timedelta(days=offset)).strftime("%Y-%m-%d")

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    if user_id not in data:
        data[user_id] = {"tasks": {}, "stats": {}}
        save_data(data)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω –∑–∞–¥–∞—á.\n–ù–∞–ø–∏—à–∏ –¥–æ 3 –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–µ—Ä–µ–∑ /–¥–æ–±–∞–≤–∏—Ç—å_–¥–æ–ø.")

async def my_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    today = today_str()
    data = load_data()
    tasks = data.get(user_id, {}).get("tasks", {}).get(today, {"main": [], "extra": []})
    msg = "üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
    msg += "üåü –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join([f"{i+1}. {'‚úÖ ' if t['done'] else '‚ùå '} {t['text']}" for i, t in enumerate(tasks.get("main", []))]) or "‚Äî"
    msg += "\n\n‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join([f"{i+1}. {'‚úÖ ' if t['done'] else '‚ùå '} {t['text']}" for i, t in enumerate(tasks.get("extra", []))]) or "‚Äî"
    await update.message.reply_text(msg)

async def add_extra(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    today = today_str()
    task_text = " ".join(context.args)
    if not task_text:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
        return
    task = {"text": task_text, "done": False}
    data.setdefault(user_id, {"tasks": {}, "stats": {}})
    data[user_id]["tasks"].setdefault(today, {"main": [], "extra": []})
    data[user_id]["tasks"][today]["extra"].append(task)
    save_data(data)
    await update.message.reply_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –¥–æ–ø. –∑–∞–¥–∞—á–∞: {task_text}")

async def complete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    today = today_str()
    data = load_data()
    all_tasks = data.get(user_id, {}).get("tasks", {}).get(today, {"main": [], "extra": []})
    args = context.args
    if not args or len(args) < 2 or args[0] not in ("–æ—Å–Ω–æ–≤–Ω—ã–µ", "–¥–æ–ø"):
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /–∑–∞–≤–µ—Ä—à–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ 2 –∏–ª–∏ /–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–ø 1")
        return
    list_name = "main" if args[0] == "–æ—Å–Ω–æ–≤–Ω—ã–µ" else "extra"
    try:
        idx = int(args[1]) - 1
        all_tasks[list_name][idx]["done"] = True
        save_data(data)
        await update.message.reply_text("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è.")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")

async def reset_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    today = today_str()
    data = load_data()
    if user_id in data and today in data[user_id]["tasks"]:
        data[user_id]["tasks"][today] = {"main": [], "extra": []}
        save_data(data)
    await update.message.reply_text("–í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å–±—Ä–æ—à–µ–Ω—ã.")

async def delete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    today = today_str()
    data = load_data()
    args = context.args
    if not args or len(args) < 2:
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç: /—É–¥–∞–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ 1 –∏–ª–∏ /—É–¥–∞–ª–∏—Ç—å –¥–æ–ø 2")
        return
    list_name = "main" if args[0] == "–æ—Å–Ω–æ–≤–Ω—ã–µ" else "extra"
    try:
        idx = int(args[1]) - 1
        del data[user_id]["tasks"][today][list_name][idx]
        save_data(data)
        await update.message.reply_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞.")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()
    count = 0
    done = 0
    for date, sets in data.get(user_id, {}).get("tasks", {}).items():
        for task in sets.get("main", []) + sets.get("extra", []):
            count += 1
            if task["done"]:
                done += 1
    await update.message.reply_text(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ {done} –∏–∑ {count} –∑–∞–¥–∞—á –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è.")

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if str(update.effective_user.id) not in ADMIN_IDS:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    data = load_data()
    msg = "üìã –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    for uid, val in data.items():
        total = 0
        done = 0
        for day in val["tasks"].values():
            for task in day["main"] + day["extra"]:
                total += 1
                if task["done"]:
                    done += 1
        msg += f"üë§ {uid}: {done}/{total} –∑–∞–¥–∞—á\n"
    await update.message.reply_text(msg)

def transfer_tasks():
    data = load_data()
    yesterday = today_str(-1)
    today = today_str()
    for user, udata in data.items():
        if yesterday in udata["tasks"]:
            for list_name in ["main", "extra"]:
                for task in udata["tasks"][yesterday][list_name]:
                    if not task["done"]:
                        data[user]["tasks"].setdefault(today, {"main": [], "extra": []})
                        data[user]["tasks"][today][list_name].append(task)
    save_data(data)

def schedule_jobs(app):
    scheduler.add_job(lambda: app.create_task(send_morning(app)), "cron", hour=11)
    scheduler.add_job(lambda: app.create_task(send_afternoon(app)), "cron", hour=14)
    scheduler.add_job(lambda: app.create_task(send_evening(app)), "cron", hour=20)
    scheduler.add_job(transfer_tasks, "cron", hour=5)

async def send_morning(app):
    for user in load_data():
        try:
            await app.bot.send_message(chat_id=int(user), text="üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –í–≤–µ–¥–∏ 3 –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏.")
        except:
            pass

async def send_afternoon(app):
    for user in load_data():
        try:
            await app.bot.send_message(chat_id=int(user), text="üïë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–∞—Ö. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–æ–≥—Ä–µ—Å—Å.")
        except:
            pass

async def send_evening(app):
    for user in load_data():
        try:
            await app.bot.send_message(chat_id=int(user), text="üåá –í–µ—á–µ—Ä–Ω–∏–π –æ—Ç—á—ë—Ç: —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å? –û—Ç–º–µ—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–æ–º–∞–Ω–¥–æ–π /–∑–∞–≤–µ—Ä—à–∏—Ç—å")
        except:
            pass

def run_dummy_server():
    class DummyHandler(BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.end_headers()
            self.wfile.write(b"Bot is running.")
    server = HTTPServer(("0.0.0.0", int(os.environ["PORT"])), DummyHandler)
    server.serve_forever()

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("–º–æ–∏_–∑–∞–¥–∞—á–∏", my_tasks))
    app.add_handler(CommandHandler("–¥–æ–±–∞–≤–∏—Ç—å_–¥–æ–ø", add_extra))
    app.add_handler(CommandHandler("—É–¥–∞–ª–∏—Ç—å", delete_task))
    app.add_handler(CommandHandler("–∑–∞–≤–µ—Ä—à–∏—Ç—å", complete))
    app.add_handler(CommandHandler("—Å–±—Ä–æ—Å", reset_tasks))
    app.add_handler(CommandHandler("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", stats))
    app.add_handler(CommandHandler("admin", admin))
    schedule_jobs(app)
    threading.Thread(target=run_dummy_server, daemon=True).start()
    app.run_polling()

if __name__ == "__main__":
    main()